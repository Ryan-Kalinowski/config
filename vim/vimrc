set encoding=utf-8
scriptencoding utf-8

if has('nvim')
	"let g:python_host_prog='/usr/local/bin/python2'
	set shada="NONE"
else
	set viminfo="NONE"
endif

syntax on

filetype plugin indent on

set runtimepath=$HOME/.config/vim,$VIMRUNTIME

execute pathogen#infect()
execute pathogen#helptags()

silent! helptags ALL

set mouse=a

highlight Pmenu ctermbg=DarkGrey ctermfg=Yellow
highlight Pmenusel ctermbg=DarkBlue ctermfg=Yellow
highlight VertSplit ctermbg=233 ctermfg=233
highlight StatusLineNC ctermbg=red ctermfg=233
highlight StatusLine ctermbg=darkgreen ctermfg=236
highlight Search ctermbg=DarkGrey ctermfg=Yellow
highlight QuickFixLine ctermbg=red guibg=red

set hidden
set ignorecase
set smartcase
set hlsearch
set incsearch
set autoindent
set smartindent
set tabstop=2
set shiftwidth=2
set noexpandtab
set number
set relativenumber
set magic

set noequalalways
set splitbelow
set splitright

"set mps+==:;

set wildmenu
set wildmode=longest:full
set wildignore=*.o,*~,*pyc

set completeopt=menu,longest

set updatetime=500
"TODOlet g:hlvarhl="ctermfg=green ctermbg=236"

set list
set listchars=tab:\|\ ,space:-
"highlight SpecialKey ctermfg=232
highlight SpecialKey ctermfg=237

map / <leader>

" Terminal
if has('nvim')
  tnoremap <ESC> <C-\><C-N>
  tnoremap <C-H> <C-\><C-N><C-W><C-H>i
  tnoremap <C-J> <C-\><C-N><C-W><C-J>i
  tnoremap <C-K> <C-\><C-N><C-W><C-K>i
  tnoremap <C-L> <C-\><C-N><C-W><C-L>i
endif

" Highlight folds
highlight Folded  ctermfg=yellow ctermbg=black

"foldsearches
" Don't start new buffers folded
set foldlevelstart=99

" Close Buffer
nnoremap q :q<CR>
nnoremap <C-Q> :q!<CR>
nnoremap <leader>q :bdelete!<cr>

" Split Switching
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
imap <C-J> <C-O><C-J>
imap <C-K> <C-O><C-K>
imap <C-L> <C-O><C-L>
imap <C-H> <C-O><C-H>

" Move Splits
nnoremap <leader><C-H> <C-W>H
nnoremap <leader><C-J> <C-W>J
nnoremap <leader><C-K> <C-W>K
nnoremap <leader><C-L> <C-W>L

" Resize Pane
nnoremap <leader>1 :res 3<CR>
nnoremap <leader>2 :res 6<CR>
nnoremap <leader>3 :res 9<CR>
nnoremap <leader>4 :res 12<CR>
nnoremap <leader>5 :res 15<CR>
nnoremap <leader>0 :res 0<CR>
nnoremap <leader>wh <C-W>_
nnoremap <leader>ww <C-W><bar>
nnoremap <leader>wn <C-W>=

" Quickfix
nnoremap <leader>mq :cwindow<CR>
nnoremap <leader>mc :cclose<CR>
nnoremap <leader>mn :cprevious<CR>
nnoremap <leader>m, :cnext<CR>

" Location List 
nnoremap <leader>ml :lopen<CR>
nnoremap <leader>mlc :lclose<CR>

" Search
nnoremap <space> /

" Misc
nnoremap J <C-D>
nnoremap K <C-U>
nnoremap H 0
nnoremap L $
nnoremap <Enter> o<esc>
nnoremap <bar> J
nnoremap Y y$
nnoremap S v$s

" Make
nnoremap <C-S> :w<CR>:make<CR>

" Run
nnoremap <leader>r :new<CR>:r! 
nnoremap <leader>rv :vnew<CR>:r! 
nnoremap <leader>rt :tabnew<CR>:r! 
map <leader><C-r> "syy<leader>ss"sP0i:r!<esc>"syy@s

" Edit vimrc
nnoremap <leader>rce :tabedit ~/.config/vim/vimrc<CR>
nnoremap <leader>rcs :source ~/.config/vim/vimrc<CR>

" Scratch
nnoremap <leader>hs :5sp $SCRATCH<CR>
nnoremap <leader>vs :25vsp $SCRATCH<CR>

" New buffer
nnoremap <leader>h :new<CR>
nnoremap <leader>v :vnew<CR>

" New tab
nnoremap <leader>tn :tabnew<CR> 
nnoremap <leader>te :tabedit 

" Move split to new tab
nnoremap <leader>tt <C-w>T

" New terminal
nnoremap <leader>z :new<CR>:terminal<CR>isource ~/.bash_profile<CR>c<CR>
nnoremap <leader>zt :tabnew<CR>:terminal<CR>isource ~/.bash_profile<CR>c<CR>
nnoremap <leader>zv :vnew<CR>:terminal<CR>isource ~/.bash_profile<CR>c<CR>

" LanguageClient """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:LanguageClient_serverCommands = {}
let g:LanguageClient_rootMarkers = {}

" Rust language server
if executable('rls')
  let g:LanguageClient_serverCommands['rust'] = ['~/.cargo/bin/rustup', 'run', 'stable', 'rls']
endif

" Elixir language server
if executable('elixir_language_server.sh')
  let g:LanguageClient_serverCommands['elixir'] = ['~/bin/elixir_language_server.sh']
	let g:LanguageClient_rootMarkers['elixir'] = ['mix.exs']
endif

" Scala language server
if executable('metals-vim')
  let g:LanguageClient_serverCommands['scala'] = ['metals-vim']
	let g:LanguageClient_rootMarkers['scala'] = ['build.sbt']
endif

nnoremap <leader>/ :call LanguageClient_contextMenu()<CR>
nnoremap <leader>rename :call LanguageClient_textDocument_rename()<CR>
nnoremap gd :call LanguageClient_textDocument_definition()<CR>

" Airline """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_detect_spell=0
let g:airline_left_alt_sep='▒'
let g:airline_left_sep='▓▒'
"░
let g:airline_powerline_fonts=1
let g:airline_right_alt_sep='▒'
let g:airline_right_sep='▒▓'
let g:airline_skip_empty_sections = 1
let g:airline_theme='badwolf'
let g:airline#extension_dispatcher#hunks#enabled=0
let g:airline#extension_dispatcher#neomake#enabled=1
let g:airline#extension_dispatcher#tabline#enabled=1
let g:airline#extension_dispatcher#tabline#buffer_min_count=2
let g:airline#extension_dispatcher#tabline#buffer_nr_show=1
let g:airline#extension_dispatcher#tabline#tab_min_count=2
let g:airline#extension_dispatcher#tabline#show_close_button=0
let g:airline#extension_dispatcher#tabline#left_sep=''
let g:airline#extension_dispatcher#tabline#right_sep=''
let g:airline#extension_dispatcher#whitespace#enabled=1
let g:airline#extension_dispatcher#whitespace#symbol='µ'
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.linenr = ''
function! AirlineInit()
  call airline#parts#define_raw('colnr', '%2c')
  call airline#parts#define_accent('colnr', 'bold')
  let g:airline_section_z = airline#section#create(['colnr', ':%l'])
endfunction
augroup airline_config
  autocmd!
  autocmd User AirlineAfterInit call AirlineInit()
augroup END

" Rainbow Parentheses """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
hi MatchParen ctermbg='blue'
let g:rbpt_colorpairs = [
    \ ['lightgreen', 'DarkOrchid3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['yellow', 'DarkOrchid3'],
    \ ['darkgreen',   'SeaGreen3'],
    \ ['red',     'SeaGreen3'],
    \ ['brown',         'brown'],
    \ ]
"DoMatchParen
autocmd VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" Neomake """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"autocmd! BufWritePost * Neomake
let g:neomake_open_list = 2
let g:neomake_warning_sign = {
  \ 'text': 'W',
  \ 'texthl': 'WarningMsg',
  \ }
let g:neomake_error_sign = {
  \ 'text': 'E',
  \ 'texthl': 'ErrorMsg',
  \ }
let g:neomake_logfile = '/Users/ryan/dev/scratch/neomake.log'
let g:neomake_enabled_makers = ['sbt']
"call neomake#configure#automake('w')

" Vimgrep """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set grepprg=rg\ --vimgrep\ $*
set grepformat=%f:%l:%c:%m

" terminal """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:terminal_scrollback_buffer_size = 5000
"hi hl-TermCursor ctermbg='blue'
"hi hl-TermCursorNC ctermbg='blue'

" FZF """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set rtp+=/usr/local/opt/fzf
"let g:fzf_action = {
"      \ 'ctrl-s': 'split',
"      \ 'ctrl-v': 'vsplit'
"      \ }
"nnoremap <leader>f :FZF<cr>

" Deoplete """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let g:deoplete#enable_at_startup = 1

" Denite """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts', ['--hidden', '--vimgrep', '--heading', '-S'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])
call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git'])

autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
	nnoremap <silent><buffer><expr> <CR> denite#do_map("do_action")
	nnoremap <silent><buffer><expr> i denite#do_map("open_filter_buffer")
	nnoremap <silent><buffer><expr> q denite#do_map("quit")
	nnoremap <silent><buffer><expr> p denite#do_map("do_action", "preview")
endfunction

"nnoremap <C-space>
"nnoremap <C-@>
"innoremap <C-@>

nnoremap <leader>f :Denite -start-filter file/rec<CR>
nnoremap <leader>* :Denite -auto-action=preview references<CR>

inoremap <C-space> :call LanguageClient_textDocument_completion()<CR>

" jsonc; comment syntax highlight """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType json syntax match Comment +\/\/.\+$+

" Scala """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" use scaladoc indentation instead of javadoc style
let g:scala_scaladoc_indent = 1
" Initialize directory structure of new project
nnoremap <leader>nps :new<CR>:terminal<CR>isource ~/.bash_profile<CR>c<CR>sbt new Ryan-Kalinowski/scala-seed.g8<CR>

" Common """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" DispatchByFileExtension
"   dispatcher: dictionary[file_extension, function_identifier]
function! DispatchByFileExtension(dispatcher)
	let s:file_extension = expand('%:e')
	if(has_key(a:dispatcher, s:file_extension))
		execute 'call ' . a:dispatcher[s:file_extension] . '()'
	endif
endfunction

" DispatchBySyntax
"   dispatcher: dictionary[syntax_name, function_identifier]
function! DispatchBySyntax(dispatcher)
	if (exists("b:current_syntax") && has_key(a:dispatcher, b:current_syntax))
		execute 'call ' . a:dispatcher[b:current_syntax] . '()'
	endif
endfunction


" REPL """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! OpenRepl()
	let s:dispatcher = {}
	let s:dispatcher['scala'] = 'OpenScalaRepl'
	call DispatchByFileExtension(s:dispatcher)
	\	|| call DispatchBySyntax(s:dispatcher)
endfunction

function! OpenScalaRepl()
	let s:project_root = getcwd() " Use the current directory for now TODO need to find project root
	execute "new"
	execute "terminal source ~/.bash_profile; clear; cd " . s:project_root . "; sbt test:console"
endfunction

nnoremap <leader>repl :call OpenRepl()<CR>

" Tests """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OpenTestPair
" Description: If focused on a non-test file, open its test file in a vertical split. If focused on a test file, open the file it tests.
function! OpenTestPair()
	call DispatchByFileExtension({'scala': 'OpenScalaTestPair'})
endfunction

function! RunTests()
	call DispatchByFileExtension({'scala': 'RunScalaTests'})
endfunction

function! OpenScalaTestPair()
	let s:file_path = expand('%:p')
	if(s:file_path =~? '/src/main/scala/')
		execute 'vnew ' . substitute(s:file_path, '/src/main/scala/', '/src/test/scala/', '')
	elseif(s:file_path =~? '/src/test/scala/')
		let s:main_window = win_getid()
		let s:main_filename = substitute(s:file_path, '/src/test/scala/', '/src/main/scala/', '')
		execute 'vnew' . s:file_path
		let s:test_window = win_getid()
		if(win_gotoid(s:main_window))
			execute 'e ' . s:main_filename
			if(win_gotoid(s:test_window))
			endif
		endif
	endif
endfunction

function! RunScalaTests()
	let s:window_id = win_getid()
	let s:project_root = getcwd() " Use the current directory for now TODO need to find project root
	execute "new"
	":startinsert
	execute "terminal source ~/.bash_profile; clear; cd " . s:project_root . "; sbt ~test"
	if(win_gotoid(s:window_id))
	endif
endfunction

nnoremap <leader>test :call RunTests()<CR>:call OpenTestPair()<CR>
